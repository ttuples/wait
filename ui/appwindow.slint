import { Button, VerticalBox, ScrollView, GridBox, HorizontalBox, ComboBox, LineEdit, TextEdit } from "std-widgets.slint";

struct Thumbnail {
    portrait: image,
    landscape: image,
}

struct Game {
    id: int,
    name: string,
    thumbnail: Thumbnail,
}

export component GameComponent inherits Rectangle {
    in-out property <Game> game;

    Image {
        source: AppAdapter.portrait_mode ? game.thumbnail.portrait : game.thumbnail.landscape;
        width: parent.width;
        height: parent.height;
    }

    // if AppAdapter.portrait_mode ? (if game.thumbnail.portrait == AppAdapter.default_portrait ? false : true) : if game.thumbnail.landscape == AppAdapter.default_landscape : true : false {
    //     TextEdit {
    //         text: game.name;
    //         width: parent.width;
    //         height: 40px;
    //         font-size: 16px;
    //         background-color: "transparent";
    //         text-color: "white";
    //         horizontal-alignment: TextAlignment.center;
    //         vertical-alignment: TextAlignment.center;
    //     }
    // }

    TouchArea {
        x: 0;
        y: 0;
        width: parent.width;
        height: parent.height;

        clicked => {
            AppAdapter.game-selected(game.id);
        }
    }
}

export component AccountSwitcher inherits Rectangle {
    VerticalLayout {
        spacing: 5px;

        account := ComboBox {
            width: parent.width;
            height: 40px;
            model: AppAdapter.accounts;

            selected() => {
                self.clear-focus();
            }
        }

        Button {
            text: "Login";
            width: parent.width;
            height: 40px;

            clicked => {
                AppAdapter.account-login(account.current-value);
            }
        }
    }
}

export component GameInfo inherits Rectangle {
    VerticalLayout {
        spacing: 5px;

        Image {
            source: AppAdapter.portrait_mode ? AppAdapter.selected_game.thumbnail.portrait : AppAdapter.selected_game.thumbnail.landscape;
            width: parent.width;
            height: 200px;
            image-fit: ImageFit.contain;
        }

        account := ComboBox {
            width: parent.width;
            height: 30px;
            model: AppAdapter.optional_accounts;
            current-value: AppAdapter.selected_account;

            selected(account) => {
                AppAdapter.selected_account = account;
                self.clear-focus();
            }
        }

        HorizontalLayout {
            width: parent.width;
            height: 40px;
            spacing: 5px;

            Button {
                text: "Launch";
                clicked => {
                    AppAdapter.game-launch(AppAdapter.selected_game, account.current-value);
                }
            }

            Button {
                text: "SteamDB";
                clicked => {
                    AppAdapter.steamdb-open(AppAdapter.selected_game);
                }
            }
        }
    }
}

export global AppAdapter {
    in property <[string]> accounts;
    in property <image> default_portrait;
    in property <image> default_landscape;

    in property <[Game]> games;
    in property <bool> portrait_mode: true;

    in property <Game> selected_game;
    in property <[string]> optional_accounts;
    in-out property <string> selected_account;

    out property <int> thumbnail_size: 100;

    callback game-selected(int);
    callback game-launch(Game, string);
    callback account-login(string);
    callback steamdb-open(Game);

    callback debug();
}

export component AppWindow inherits Window {
    min-width: 1280px;
    min-height: 720px;

    HorizontalLayout {
        width: 100%;
        height: 100%;

        VerticalBox {
            width: 300px;
            height: 100%;

            AccountSwitcher {}

            GameInfo {}
        }

        VerticalLayout {
            width: parent.width - 300px;
            height: 100%;

            HorizontalBox {
                width: parent.width;
                height: 50px;

                LineEdit {
                    text: "";
                    placeholder-text: "Search...";
                    font-size: 16px;
                }

                Button {
                    text: "Layout";
                    clicked => {
                        AppAdapter.portrait_mode = !AppAdapter.portrait_mode;
                    }
                }
            }

            ScrollView {
                width: parent.width;
                height: parent.height - 50px;

                property <int> columns: floor((parent.width + 5px) / (AppAdapter.thumbnail_size * 1px + 5px));

                VerticalLayout {
                    spacing: 5px;

                    for _row in ceil(AppAdapter.games.length / columns) : HorizontalLayout {
                        alignment: LayoutAlignment.center;
                        spacing: 5px;

                        for _col in columns : Rectangle {
                            width: AppAdapter.thumbnail_size * 1px;
                            height: AppAdapter.portrait_mode ? (AppAdapter.thumbnail_size * 1.5) * 1px : (AppAdapter.thumbnail_size * 0.467) * 1px;

                            property <int> index: _row * columns + _col;

                            if index < AppAdapter.games.length : GameComponent {
                                game: AppAdapter.games[index];
                            }
                        }
                    }
                }
            }
        }
    }
}
