import { Button, VerticalBox, ScrollView, GridBox, HorizontalBox, ComboBox, LineEdit, TextEdit } from "std-widgets.slint";

struct Thumbnail {
    portrait: image,
    landscape: image,
}

struct Game {
    id: int,
    name: string,
    thumbnail: Thumbnail,
}

export component GameComponent inherits Rectangle {
    in-out property <Game> game;

    Rectangle {
        width: parent.width;
        height: parent.height;
        border-width: 2px;
        border-color: #3d3d3d;

        Text {
            width: parent.width - 4px;
            height: parent.height - 4px;
            text: game.name;
            horizontal-alignment: TextHorizontalAlignment.center;
            vertical-alignment: TextVerticalAlignment.center;
            wrap: TextWrap.word-wrap;
        }
    }

    Image {
        source: AppAdapter.portrait_mode ? game.thumbnail.portrait : game.thumbnail.landscape;
        width: parent.width;
        height: parent.height;
    }

    TouchArea {
        x: 0;
        y: 0;
        width: parent.width;
        height: parent.height;

        pointer-event(event) => {
            if (event.kind == PointerEventKind.down) {
                if (event.button == PointerEventButton.left) {
                    AppAdapter.game-selected(game);
                } else if (event.button == PointerEventButton.right) {
                    popup.show();
                }
            }
        }
    }

    popup := PopupWindow {
        x: parent.width;

        Rectangle {
            background: #1c1c1c;
            border-color: #3d3d3d;
            border-width: 1px;

            Button {
                text: "Favorite";
                clicked => {
                    AppAdapter.game-favorite(game);
                }
            }
        }
    }
}

export component GameContextMenu inherits Rectangle {
    in-out property <Game> game;

    VerticalLayout {
        Button {
            text: "Favorite";
            clicked => {
                AppAdapter.game-favorite(game);
            }
        }
    }

    Image {
        source: AppAdapter.portrait_mode ? game.thumbnail.portrait : game.thumbnail.landscape;
        width: parent.width;
        height: parent.height;
    }

    TouchArea {
        x: 0;
        y: 0;
        width: parent.width;
        height: parent.height;

        clicked => {
            AppAdapter.game-selected(game);
        }
    }
}

export component AccountSwitcher inherits Rectangle {
    VerticalLayout {
        spacing: 5px;

        account := ComboBox {
            width: parent.width;
            height: 40px;
            model: AppAdapter.accounts;

            selected() => {
                self.clear-focus();
            }
        }

        Button {
            text: "Login";
            width: parent.width;
            height: 40px;

            clicked => {
                AppAdapter.account-login(account.current-value);
                account.clear-focus();
            }
        }
    }
}

export component GameInfo inherits Rectangle {
    VerticalLayout {
        spacing: 5px;

        Rectangle {
            width: parent.width;
            height: 55px;
            border-radius: 5px;
            border-color: #3d3d3d;
            border-width: 1px;

            Text {
                width: parent.width - 10px;
                height: parent.height - 10px;
                text: AppAdapter.selected_game.name;
                padding: 5px;
                font-size: 20px;
                horizontal-alignment: TextHorizontalAlignment.center;
                vertical-alignment: TextVerticalAlignment.center;
                wrap: TextWrap.word-wrap;
            }
        }

        Image {
            source: AppAdapter.portrait_mode ? AppAdapter.selected_game.thumbnail.portrait : AppAdapter.selected_game.thumbnail.landscape;
            width: parent.width;
            height: 200px;
            image-fit: ImageFit.contain;
        }

        account := ComboBox {
            width: parent.width;
            height: 30px;
            model: AppAdapter.game_accounts;
            current-value: AppAdapter.selected_account;

            selected(account) => {
                AppAdapter.selected_account = account;
                self.clear-focus();
            }
        }

        HorizontalLayout {
            width: parent.width;
            height: 40px;
            spacing: 5px;

            Button {
                text: "Launch";
                clicked => {
                    AppAdapter.game-launch(AppAdapter.selected_game, account.current-value);
                }
            }

            Button {
                text: "SteamDB";
                clicked => {
                    AppAdapter.steamdb-open(AppAdapter.selected_game);
                }
            }
        }
    }
}

export component Spacer inherits Rectangle {
    height: 10px;
    border-radius: 2px;
    border-color: #3d3d3d;
}

export global AppAdapter {
    in property <[string]> accounts;

    in property <[Game]> games;
    in property <[Game]> favorites;
    in property <bool> portrait_mode: true;

    in property <Game> selected_game;
    in property <[string]> game_accounts;
    in-out property <string> selected_account;
    in-out property <bool> show_context_menu: false;

    // Settings
    out property <int> thumbnail_size: 100;


    callback game-selected(Game);
    callback game-launch(Game, string);
    callback game-favorite(Game);
    callback account-login(string);
    callback steamdb-open(Game);
    callback search-changed(string);

    callback debug();
}

export component AppWindow inherits Window {
    title: "What Account Is This?";

    min-width: 1280px;
    min-height: 720px;

    HorizontalLayout {
        width: 100%;
        height: 100%;

        VerticalBox {
            width: 300px;
            height: 100%;

            AccountSwitcher {}

            GameInfo {}
        }

        VerticalLayout {
            width: parent.width - 300px;
            height: 100%;

            HorizontalBox {
                width: parent.width;
                height: 50px;

                LineEdit {
                    text: "";
                    placeholder-text: "Search...";
                    font-size: 16px;

                    edited(text) => {
                        AppAdapter.search-changed(text);
                    }
                }

                Button {
                    text: "Layout";
                    clicked => {
                        AppAdapter.portrait_mode = !AppAdapter.portrait_mode;
                    }
                }
            }

            ScrollView {
                width: parent.width;
                height: parent.height - 55px;

                property <int> columns: floor((parent.width + 5px) / (AppAdapter.thumbnail_size * 1px + 5px));

                VerticalLayout { // Favorites
                    spacing: 5px;

                    if AppAdapter.favorites.length > 0 : VerticalLayout {
                        spacing: 5px;

                        for _row in ceil(AppAdapter.favorites.length / columns) : HorizontalLayout {
                            alignment: LayoutAlignment.center;
                            spacing: 5px;

                            for _col in columns : Rectangle {
                                width: AppAdapter.thumbnail_size * 1px;
                                height: AppAdapter.portrait_mode ? floor(AppAdapter.thumbnail_size * 1.5) * 1px : floor(AppAdapter.thumbnail_size * 0.467) * 1px;

                                property <int> index: _row * columns + _col;

                                if index < AppAdapter.favorites.length : GameComponent {
                                    game: AppAdapter.favorites[index];
                                }
                            }
                        }

                        Rectangle {
                            height: 4px;
                            border-radius: 2px;
                            background: #3d3d3d;
                        }
                    }

                    VerticalLayout { // All games
                        spacing: 5px;

                        for _row in ceil(AppAdapter.games.length / columns) : HorizontalLayout {
                            alignment: LayoutAlignment.center;
                            spacing: 5px;

                            for _col in columns : Rectangle {
                                width: AppAdapter.thumbnail_size * 1px;
                                height: AppAdapter.portrait_mode ? floor(AppAdapter.thumbnail_size * 1.5) * 1px : floor(AppAdapter.thumbnail_size * 0.467) * 1px;

                                property <int> index: _row * columns + _col;

                                if index < AppAdapter.games.length : GameComponent {
                                    game: AppAdapter.games[index];
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
